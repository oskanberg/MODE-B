@abstract
rule NamedElement
  transform s : source!NamedElement
  to t: target!NamedElement {
  	t.name := s.name;
}

rule Ecosystem
  transform s : source!Ecosystem
  to t : target!Ecosystem {
  	t.libraries ::= s.libraries;
  	t.devices ::= s.devices;
  	t.mediaSources ::= s.mediaSources;
}

rule Library
  transform s : source!Library
  to t : target!Library 
  extends NamedElement {
  	t.collections ::= s.collections;
}

rule MediaCollection
  transform s : source!MediaCollection
  to t : target!MediaCollection 
  extends NamedElement {
  	t.members ::= s.members;
  	t.host ::= s.host;
  	t.syncedDevices ::= s.syncedDevices;
  	t.name := s.name;
}

rule Tablet
  transform s : source!Tablet
  to t : target!Tablet
  extends NamedElement {
  	t.hostOf ::= s.hostOf;
  	t.collections ::= s.collections;
}

rule Computer
  transform s : source!Computer
  to t : target!Computer
  extends NamedElement {
  	t.hostOf ::= s.hostOf;
  	t.collections ::= s.collections;
}

rule Smartphone
  transform s : source!Smartphone
  to t : target!Smartphone
  extends NamedElement {
  	t.hostOf ::= s.hostOf;
  	t.collections ::= s.collections;
}

rule EReader
  transform s : source!EReader
  to t : target!EReader 
  extends NamedElement {
  	t.hostOf ::= s.hostOf;
  	t.collections ::= s.collections;
  	t.videoEnabled := s.videoEnabled;
  	t.audioEnabled := s.audioEnabled;
}

rule AudioBook
  transform s : source!AudioBook
  to t : target!AudioBook
  extends NamedElement {
  	t.origin ::= s.origin;
  	t.duration := s.duration;
}

rule MusicTrack
  transform s : source!MusicTrack
  to t : target!MusicTrack 
  extends NamedElement {
  	t.origin ::= s.origin;
  	t.duration := s.duration;
}

rule Video
  transform s : source!Video
  to t : target!Video 
  extends NamedElement {
  	t.origin ::= s.origin;
  	t.duration := s.duration;
}

rule Image
  transform s : source!Image
  to t : target!Image 
  extends NamedElement {
  	t.origin ::= s.origin;
}

rule Ebook
  transform s : source!Ebook
  to t : target!Ebook 
  extends NamedElement {
  	t.origin ::= s.origin;
}

rule ExternalSource
  transform s : source!ExternalSource
  to t : target!ExternalSource 
  extends NamedElement {
  	t.contents ::= s.contents;
  	t.sourceType := s.sourceType;
}

rule Store
  transform s : source!Store
  to t : target!Store 
  extends NamedElement {
  	t.contents ::= s.contents;
}