/**
 */
package MediaLibrary.provider;

import MediaLibrary.util.MediaLibraryAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MediaLibraryItemProviderAdapterFactory extends MediaLibraryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MediaLibraryItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Ecosystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EcosystemItemProvider ecosystemItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Ecosystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEcosystemAdapter() {
		if (ecosystemItemProvider == null) {
			ecosystemItemProvider = new EcosystemItemProvider(this);
		}

		return ecosystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Library} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryItemProvider libraryItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Library}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryAdapter() {
		if (libraryItemProvider == null) {
			libraryItemProvider = new LibraryItemProvider(this);
		}

		return libraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.MediaCollection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MediaCollectionItemProvider mediaCollectionItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.MediaCollection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMediaCollectionAdapter() {
		if (mediaCollectionItemProvider == null) {
			mediaCollectionItemProvider = new MediaCollectionItemProvider(this);
		}

		return mediaCollectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Tablet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TabletItemProvider tabletItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Tablet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTabletAdapter() {
		if (tabletItemProvider == null) {
			tabletItemProvider = new TabletItemProvider(this);
		}

		return tabletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Computer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComputerItemProvider computerItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Computer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComputerAdapter() {
		if (computerItemProvider == null) {
			computerItemProvider = new ComputerItemProvider(this);
		}

		return computerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Smartphone} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmartphoneItemProvider smartphoneItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Smartphone}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmartphoneAdapter() {
		if (smartphoneItemProvider == null) {
			smartphoneItemProvider = new SmartphoneItemProvider(this);
		}

		return smartphoneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.EReader} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EReaderItemProvider eReaderItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.EReader}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEReaderAdapter() {
		if (eReaderItemProvider == null) {
			eReaderItemProvider = new EReaderItemProvider(this);
		}

		return eReaderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.AudioBook} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AudioBookItemProvider audioBookItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.AudioBook}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAudioBookAdapter() {
		if (audioBookItemProvider == null) {
			audioBookItemProvider = new AudioBookItemProvider(this);
		}

		return audioBookItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.MusicTrack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MusicTrackItemProvider musicTrackItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.MusicTrack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMusicTrackAdapter() {
		if (musicTrackItemProvider == null) {
			musicTrackItemProvider = new MusicTrackItemProvider(this);
		}

		return musicTrackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Video} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VideoItemProvider videoItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Video}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVideoAdapter() {
		if (videoItemProvider == null) {
			videoItemProvider = new VideoItemProvider(this);
		}

		return videoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Ebook} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EbookItemProvider ebookItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Ebook}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEbookAdapter() {
		if (ebookItemProvider == null) {
			ebookItemProvider = new EbookItemProvider(this);
		}

		return ebookItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.ExternalSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalSourceItemProvider externalSourceItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.ExternalSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalSourceAdapter() {
		if (externalSourceItemProvider == null) {
			externalSourceItemProvider = new ExternalSourceItemProvider(this);
		}

		return externalSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link MediaLibrary.Store} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoreItemProvider storeItemProvider;

	/**
	 * This creates an adapter for a {@link MediaLibrary.Store}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoreAdapter() {
		if (storeItemProvider == null) {
			storeItemProvider = new StoreItemProvider(this);
		}

		return storeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ecosystemItemProvider != null) ecosystemItemProvider.dispose();
		if (libraryItemProvider != null) libraryItemProvider.dispose();
		if (mediaCollectionItemProvider != null) mediaCollectionItemProvider.dispose();
		if (tabletItemProvider != null) tabletItemProvider.dispose();
		if (computerItemProvider != null) computerItemProvider.dispose();
		if (smartphoneItemProvider != null) smartphoneItemProvider.dispose();
		if (eReaderItemProvider != null) eReaderItemProvider.dispose();
		if (audioBookItemProvider != null) audioBookItemProvider.dispose();
		if (musicTrackItemProvider != null) musicTrackItemProvider.dispose();
		if (videoItemProvider != null) videoItemProvider.dispose();
		if (imageItemProvider != null) imageItemProvider.dispose();
		if (ebookItemProvider != null) ebookItemProvider.dispose();
		if (externalSourceItemProvider != null) externalSourceItemProvider.dispose();
		if (storeItemProvider != null) storeItemProvider.dispose();
	}

}
